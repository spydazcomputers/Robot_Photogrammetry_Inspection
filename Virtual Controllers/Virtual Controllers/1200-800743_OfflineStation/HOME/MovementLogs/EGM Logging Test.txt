MODULE TRob1Main
    !***********************************************************
    ! Program data
    !***********************************************************
    ! Home position.
    LOCAL CONST jointtarget home := [[0, -30, 30, 0, 90, 0], [9E9, 9E9, 9E9, 9E9, 9E9, 9E9]];
    
    ! Identifier for the EGM correction.
    LOCAL VAR egmident egm_id;
    
    ! Limits for convergance.
    LOCAL VAR egm_minmax egm_condition := [-0.1, 0.1];
            
    ! EGM pose frames.
    LOCAL CONST pose egm_correction_frame := [[0, 0, 0], [1, 0, 0, 0]];
    LOCAL CONST pose egm_sensor_frame     := [[0, 0, 0], [1, 0, 0, 0]];
    
    ! The work object (here set to coincidence with ROB_2's base frame).
    LOCAL PERS wobjdata egm_wobj := [FALSE, TRUE, "", [[0, 1000, 0],[1, 0, 0, 0]], [[0, 0, 0],[1, 0, 0, 0]]];
    
    VAR string folderPath := "/MovementLogs/";  ! Specify the folder path
    VAR string filePrefix := "Data_";  ! Prefix for the file name
    VAR string fileExtension := ".csv";  ! File extension
    
    VAR string currentTime;  ! Get current date and time as a string
    VAR string fileName;  ! Combine folder path, prefix, timestamp, and extension
    
    VAR iodev file;
    
    VAR robtarget currentTarget;
    VAR pose currentPose;
    VAR string rowData;
    
    PROC main()
        TPWrite "Entered main()";
        MoveL Home_Sensors, v200, fine, tool0;
        
        ! Register an EGM id.
        EGMGetId egm_id;
            
        ! Setup the EGM communication.
        EGMSetupUC ROB_1, egm_id, "default", "ROB_1", \Pose;
        
        currentTime := CDate() + "_" + CTime();  ! Get current date and time as a string
        fileName := folderPath + filePrefix + currentTime + fileExtension;  ! Combine folder path, prefix, timestamp, and extension
        
        ! Open the file in write mode
        Open "HOME:" \file:=fileName, file \Write;  ! "w" for write mode
        
        ! Write the header row with column names
        Write file, "X,Y,Z,rx,ry,rz,rw";  ! CSV header
        
        ! Get and record robot data, similar to the previous code
        
        ! Close the file
        Close file;
        
        WHILE TRUE DO
            ! Prepare for an EGM communication session.
            EGMActPose egm_id,
                       \WObj:=wobj0,
                       egm_correction_frame,
                       EGM_FRAME_BASE,
                       egm_sensor_frame,
                       EGM_FRAME_BASE
                       \X:=egm_condition
                       \Y:=egm_condition
                       \Z:=egm_condition
                       \Rx:=egm_condition
                       \Ry:=egm_condition
                       \Rz:=egm_condition
                       \MaxSpeedDeviation:=20.0;
                        
            ! Start the EGM communication session.
            ! EGMRunPose egm_id, EGM_STOP_RAMP_DOWN, \X \Y \Z \Rx \Ry \Rz \CondTime:=5 \RampOutTime:=5;
            
            !EGMRunPose egm_id, EGM_STOP_RAMP_DOWN, \X \Y \Z \CondTime:=30 \RampOutTime:=5;
            !TPWrite "Movising to position";
            EGMRunPose egm_id, EGM_STOP_HOLD, \X \Y \Z \CondTime:=0.01 \RampInTime:=0.05 \RampOutTime:=0.05;
            
            ! Open the file in append mode
            Open "HOME:" \file:=fileName, file \Append;  ! "a" for append mode
            
            ! Get the current robot target (position and orientation)
            
            currentTarget := CRobT();
            
            ! Extract position and orientation data
            
            rowData := NumToStr(currentPose.trans.X, 2) + "," +
                       NumToStr(currentPose.trans.Y, 2) + "," +
                       NumToStr(currentPose.trans.Z, 2) + "," +
                       NumToStr(currentPose.rot.q1, 2) + "," +
                       NumToStr(currentPose.rot.q2, 2) + "," +
                       NumToStr(currentPose.rot.q3, 2) + "," +
                       NumToStr(currentPose.rot.q4, 2);
            
            ! Write the data to the CSV file
            Write file, rowData;
            
            ! Close the file
            Close file;
            
            !WaitTime 0.05;
        ENDWHILE
        
        ! Release the EGM id.
            EGMReset egm_id;
    ERROR
        IF ERRNO = ERR_UDPUC_COMM THEN
            TPWrite "Communication timedout";
            TRYNEXT;
        ENDIF
    ENDPROC

ENDMODULE