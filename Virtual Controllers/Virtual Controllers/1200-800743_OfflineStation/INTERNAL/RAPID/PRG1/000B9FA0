MODULE CCSU_Tote_Vision
    !THIS MODULE CONTAINS THE CODE TO CONTROL THE COGNEX CAMERA AND USE THE DATA IT FINDS
    
    !========================
    !===PERS AND VARIABLES===
    !========================
    
    !CAMERA
    !PERS num CameraReferencePartX := 103.476;   !MM
    !PERS num CameraReferencePartY := 130.934;    !MM
     
    PERS num CameraReferencePartR := 0.; !DEG
    PERS num CameraReferencePartX := -25.0674;   
    PERS num CameraReferencePartY := -2.27737;    
    
    PERS num ScaleCameraUnits := 1; !IN / MM
    
    VAR num XScale :=1;
    VAR num YScale :=1;
    
    VAR num CameraPartViewX;
    VAR num CameraPartViewY;
    VAR num CameraPartViewR;
    VAR num CameraPartViewS;
    PERS num CameraData{4};
    
    !SCALE
    CONST num HeightCalibration:= 50;
    VAR bool HadHeightChange;
    
    !TARGETS & CAMERA
    VAR cameratarget CamTarget;
    VAR robtarget partTarget:=[[1.65,4.81,-0.05],[1.9553E-05,-0.697425,-0.716657,-8.53078E-06],[-1,-1,0,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    VAR string CurrentJob:="";

    TASK PERS wobjdata PartWObj:=[FALSE,TRUE,"",[[0,0,0],[1,0,0,0]],[[13.1654,-495.2,276.409],[0.00674903,-0.715872,-0.698198,0.00127787]]];
    
    !===============
    !===CONSTANTS===
    !===============
    
    !LOCATIONS
    CONST robtarget Zero:=[[0,0,0],[1,0,0,0],[-2,-1,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    CONST robtarget ReferencePartPos:=[[-53.37,-459.51,273.96],[0.00673481,-0.708288,-0.705891,0.00135068],[-2,-1,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    CONST robtarget studyLocation:=[[8.48,-478.81,564.76],[0.293925,0.637032,0.648944,-0.294399],[-1,-1,0,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    CONST robtarget VIsionGrasping_10:=[[22.80,1.78,0.16],[1,-1.42423E-05,7.53832E-05,5.47497E-06],[-1,-1,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    CONST robtarget VIsionGrasping_20:=[[16.64,5.03,20.67],[0.999236,3.31766E-05,-0.000293,-0.039076],[-1,-1,0,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    
    !JOBS
    CONST string VisionPartJob:="CCSU_ToteVision.job";
    !CONST string VisionPartJob:="CCSU_OLDToteVision.job";
    
    
    
    
    
    !===================
    !===PROGRAM START===
    !===================

    !READY CAMERA
    !SET CAMERA TO RUN MODE AND CHOOSE JOB
    PROC VisionInitialization(string myjob)

        CurrentJob := CamGetLoadedJob(CCSU_FORCE_ABB_Vision);

        IF not(CurrentJob = myjob) THEN
            TPWrite "diffrent job loaded in camera: " + CamGetName(CCSU_FORCE_ABB_Vision);
            CamSetProgramMode CCSU_FORCE_ABB_Vision;
            CamLoadJob CCSU_FORCE_ABB_Vision, myjob;
        ELSE
            TPWrite "Job " + CurrentJob + " is loaded in camera " + CamGetName(CCSU_FORCE_ABB_Vision);
        ENDIF

        CamSetRunMode CCSU_FORCE_ABB_Vision;

    ENDPROC

    
    
    !CAPTURE NEW IMAGE AND WRITE TO "myCameraTarget"
    PROC VisionCaptureData()

        CamReqImage CCSU_FORCE_ABB_Vision;
        CamGetResult CCSU_FORCE_ABB_Vision,CamTarget;

        IF CamTarget.val1 = 1 THEN
            TPWrite("No Parts Detected, Camera Job has returned a No Go"); 
             WaitTime 2; 
            Stop;
        ENDIF
        
    ENDPROC

    
    !USE CAMERA TARGET AND MOVE OVER TO THE TARGET FOUND BY CHANGING WOBJ "PartWObj" AND GO TO ZERO ON THAT WOBJ
    !THIS METHOD USES THE CAMERATARGET AND MOVES OVER TO THE TARGET FOUND BY CHANGING THE WORKOBJECT "PartWObj" AND GOING TO ZERO ON THAT WOBJ
    PROC VisionUpdateWObj(num PartNumber)
        
        
        VAR num DeltaRotationZ;
        VAR num DeltaRotationY;
        VAR num DeltaRotationX;
        

        CamGetParameter CCSU_FORCE_ABB_Vision,ChoosePartToGrab("X",PartNumber)\NumVar:=CameraPartViewX;
        CamGetParameter CCSU_FORCE_ABB_Vision,ChoosePartToGrab("Y",PartNumber)\NumVar:=CameraPartViewY;
        CamGetParameter CCSU_FORCE_ABB_Vision,ChoosePartToGrab("R",PartNumber)\NumVar:=CameraPartViewR;
        CamGetParameter CCSU_FORCE_ABB_Vision,ChoosePartToGrab("S",PartNumber)\NumVar:=CameraPartViewS;
        
        CameraPartViewX :=CameraPartViewX * ScaleCameraUnits;
        CameraPartViewY :=CameraPartViewY * ScaleCameraUnits;
        
        CameraData := [CameraPartViewX,CameraPartViewY,CameraPartViewR,CameraPartViewS];
        
        !POSITION TRANSLATION !FLIPPED X AND Y TO ROTATE VALUES 90deg 
        PartWObj.oframe.trans.x:=ReferencePartPos.trans.x+(CameraPartViewX-CameraReferencePartX);
        PartWObj.oframe.trans.y:=ReferencePartPos.trans.y+(CameraPartViewY-CameraReferencePartY);

        PartWObj.oframe.trans.Z:=ReferencePartPos.trans.z+getCalculatedHeight();
        
        !POSITION ROTATION
        !CONVERTS THE ORIENTATION INTO EULER ANGLES, SUBTRACTS THE CameraPartViewR AND THE REFRENCE PART ROTATION, COVERTS BACK TO A QUATERNINON AND NORMALISES.
        DeltaRotationZ := EulerZYX(\Z,ReferencePartPos.rot)+(CameraReferencePartY - CameraPartViewR);
        DeltaRotationY := EulerZYX(\Y,ReferencePartPos.rot);
        DeltaRotationX := EulerZYX(\X,ReferencePartPos.rot);
        
        PartWObj.oframe.rot:=OrientZYX(DeltaRotationZ, DeltaRotationY, DeltaRotationX);
        PartWObj.oframe.rot:= NOrient(PartWObj.oframe.rot);
        

    ENDPROC
    
    
   

    
    PROC VisionMoveToObject()
        
        HadHeightChange := FALSE;

       !WaitRob\InPos;
        
        !IF PART IS TOO HIGH FOR EASY REACH 
        IF (getCalculatedHeight() > 25 AND getCalculatedHeight() < 50) THEN !IF HEIGHT IS DIFFERENT, MOVE WAY ABOVE PART BEFORE GOING LOWER
            MoveJ GetLocationXUnitsAbove(Zero, 90),defaultmovespeed,z50,Totebox_Gripper_FS\WObj:=PartWObj;
            WaitRob\Zerospeed;
            HadHeightChange := TRUE;
        ENDIF
        
        MoveJ GetLocationXUnitsAbove(VIsionGrasping_20,70),defaultmovespeed,z50,Totebox_Gripper_FS\WObj:=PartWObj;
        !MoveJ Zero,defaultmovespeed,z50,Totebox_Gripper_FS\WObj:=PartWObj;
        WaitRob\ZeroSpeed;
        WaitTime 1;     
        
    ENDPROC

    !GETS THE REFERENCE POSITION FROM CAMERA WITH VisionPartJob AND WRITES IT TO THE REFRENCE PART VARIBLES.
    PROC VisionCaibrateReferencePart()
        
        CONST num n:=5;
        VAR num CameraPartX:=0;
        VAR num CameraPartY:=0;
        VAR num CameraPartR:=0;
        
        var num CameraReferenceRawData{n,3};
        !1=X,2=Y,3=R 
        !NOTE ARRAYS START AT 1. SO CameraReferenceRawData{n,3} HAS 3 ELEMENTS PER ROW, OUT OF n ROWS. 
        VAR num i:=1;

        VisionInitialization(VisionPartJob);

        WHILE i<=n DO

            VisionCaptureData;

            CamGetParameter CCSU_FORCE_ABB_Vision,ChoosePartToGrab("X",0)\NumVar:=CameraReferenceRawData{i,1};
            CamGetParameter CCSU_FORCE_ABB_Vision,ChoosePartToGrab("Y",0)\NumVar:=CameraReferenceRawData{i,2};
            CamGetParameter CCSU_FORCE_ABB_Vision,ChoosePartToGrab("R",0)\NumVar:=CameraReferenceRawData{i,3};

            i:=i+1;

        ENDWHILE

        
        !FINDS THE AVERAGE OF THE ARRAY CameraReferenceRawData
        !SUMMS THE ARRAY ELEMENTS & DEVIDES THE SUM BY N
        FOR i FROM 1 TO n DO
            CameraPartX:=CameraPartX+CameraReferenceRawData{i,1};
            CameraPartY:=CameraPartY+CameraReferenceRawData{i,2};
            CameraPartR:=CameraPartR+CameraReferenceRawData{i,3};
        ENDFOR
        
        !CameraReferencePartX:=CameraPartX/n;
        !CameraReferencePartY:=CameraPartY/n;
        !CameraReferencePartR:=CameraPartR/n;
                
        !PRINTS THE OUTPUT TO THE TEACH PENDENT(TP).
        TPWrite("New Part Calibrated");
        TPWrite("New RefrencePartX: ")\Num:=CameraPartX/n;
        TPWrite("New RefrencePartY: ")\Num:=CameraPartY/n;
        TPWrite("New RefrencePartR: ")\Num:=CameraPartR/n;

        WaitTime(4);

        MoveJ Home_Sensors,v30,fine,CurrentTool\WObj:=wobj0;
        WaitRob\InPos;
        MoveJ ReferencePartPos,v30,fine,Totebox_Gripper_FS\WObj:=wobj0;
        WaitTime(2);
        MoveJ Home_Sensors,v100,fine,CurrentTool\WObj:=wobj0;

    ENDPROC



    PROC VisionTest()
        
        !INITALIZE LOOP
        VAR num i:=0;
        VAR bool NewPartsExistLoop := TRUE;
        VisionInitialization(VisionPartJob);
        VisionCaptureData;
        
        goHome;
        MoveJ Home_Sensors,v100,fine,Gripper_FS;
        
        IF NOT rGripperIsOpen() THEN
            rGripperOpen;
        ENDIF
        
        !NEW PARTS EXIST IS TRUE UNTIL PROVEN FALSE BY VisionUpdateWObj
        WHILE (NewPartsExistLoop = TRUE) DO
            
            !IF THE CAMERA PARTS DETECTED IS GREATER THAN OR EQUAL TO i
            IF i >= CamTarget.val3 THEN
                TPWrite("No More Parts Detected"); 
                NewPartsExistLoop := FALSE;
                MoveJ Home_Sensors,v100,fine,CurrentTool\WObj:=wobj0;
            ENDIF
            
            IF (NewPartsExistLoop = TRUE) THEN
                VisionUpdateWObj(i);
                VisionMoveToObject;
                VisionGrabAndRelease;
                i:=i+1;
            ENDIF
        ENDWHILE

        goHome;
    ENDPROC

     PROC VisionGrabAndRelease()
        MoveJ GetLocationXUnitsAbove(VIsionGrasping_20,20), defaultmovespeed, fine, Totebox_Gripper_FS\WObj:=PartWObj;
        MoveJ VIsionGrasping_20, defaultmovespeed, fine, Totebox_Gripper_FS\WObj:=PartWObj;
        WaitTime(1);
        rGripperClose; 
        WaitTime(1);
        
        MoveJ GetLocationXUnitsAbove(VIsionGrasping_20,120),defaultmovespeed,fine,Totebox_Gripper_FS\WObj:=PartWObj;
        MoveJ studyLocation,defaultmovespeed,fine,Totebox_Gripper_FS\WObj:=wobj0;!NOTE STATIC POSITION
        WaitTime(2);
        
        !MOVES OUT OF THE WAY IF PART HEIGHT WAS TOO TALL FOR EASY REACH
        IF(HadHeightChange) THEN
            MoveJ GetLocationXUnitsAbove(VIsionGrasping_20,120),defaultmovespeed,z50,Totebox_Gripper_FS\WObj:=PartWObj;
            WaitRob\ZeroSpeed;
        ENDIF
        
        MoveJ GetLocationXUnitsAbove(VIsionGrasping_20,120),defaultmovespeed,fine,Totebox_Gripper_FS\WObj:=PartWObj;
        MoveJ GetLocationXUnitsAbove(VIsionGrasping_20,40),defaultmovespeed,fine,Totebox_Gripper_FS\WObj:=PartWObj;
        rGripperOpen;
        MoveJ VIsionGrasping_20,defaultmovespeed,fine,Totebox_Gripper_FS\WObj:=PartWObj;
        MoveJ GetLocationXUnitsAbove(VIsionGrasping_20,20),defaultmovespeed,fine,Totebox_Gripper_FS\WObj:=PartWObj;
        MoveJ GetLocationXUnitsAbove(VIsionGrasping_20,10),defaultmovespeed,fine,Totebox_Gripper_FS\WObj:=PartWObj;    
        
        
        MoveJ GetLocationXUnitsAbove(VIsionGrasping_20,70),defaultmovespeed,z50,Totebox_Gripper_FS\WObj:=PartWObj;
    ENDPROC
ENDMODULE